var mongodb = require('mongodb');
var mongostr = 'mongodb://192.168.30.202:27018/';

var mongocoll = [];
var mongoconfigs = [];
var total = 0;
function getconn(config, callback) {
    for (var k in mongoconfigs) {
        var mongoconfig = mongoconfigs[k];
        if (mongoconfig.basename == config.basename && mongoconfig.username == config.username
		&& mongoconfig.password == config.password && mongoconfig.authbase == config.authbase && mongoconfig.tablename == config.tablename) {
            if (mongocoll[k]) {
                callback({ state: 1, coll: mongocoll[k] });
                return;
            } else {
                mongocoll.pop(mongocoll[k]);
                mongoconfigs.pop(mongoconfigs[k]);
            }
        }
    }
    mongodb.connect(getmongostr(config), function (err, conn) {
           if (err) {
            callback({ state: -2, msg: err });
            return;
        }
        conn.collection(config.tablename, function (err, coll) {
            if (err) {
                callback({ state: -1, msg: err });
                return;
            } else {
                mongoconfigs.push(config);
                mongocoll.push(coll);
                callback({ state: 1, coll: coll });
            }
        });
    });
}

function getmongostr(config) {
    if (!config.auth) {
        return  mongostr+config.basename;
    } else {
        //return mongostr = 'mongodb://' + config.username + ':' + config.password + '@' + '115.28.218.88:29018/' + config.basename + "?authSource=" + config.authbase;
    }
}

var mongodbhandler = {
	//插入
    set: function(config, data, callback) {
        getconn(config, function(result) {
            if (result.state == 1) {
                result.coll.save(data, function(err, saved) {
                    if (!err || !saved) {
                        callback(null,{ state: 1,data:saved });
                    } else {
                        callback(null,{ state: 0, msg: err });
                    }
                });
            } else {
                callback(null,{ state: result.state, msg: result.err });
            }
        });
    },
    //查询
    get: function (config, callback) { 
        getconn(config, function(result) {
            if (result.state == 1) {
                result.coll.find(config.query).sort(config.sort).skip((config.index - 1) * config.size).limit(parseInt(config.size)).toArray(function(err, docs) {
                    if (!err) {
                        callback(null,{ state: 1, data: docs });
                    } else {
                        callback(null,{ state: 0, msg: err });
                    }
                });
            } else {
                callback(null,{ state: result.state, msg: result.err });
            }
        });
    },
    //删除
    del : function(config,callback){
    	getconn(config, function(result) {
            if (result.state == 1) {
                result.coll.remove(config.query,function(err, docs) {
                    if (!err) {
                        callback(null,{ state: 1, data: docs });
                    } else {
                        callback(null,{ state: 0, msg: err });
                    }
                });
            } else {
                callback(null,{ state: result.state, msg: result.err });
            }
        });
    },
    //更新
    update :function(config,callback){
    	getconn(config, function(result) {
            if (result.state == 1) {
                result.coll.update(config.query,config.updata,config.multi?{multi:true}:{multi:false},function(err, docs) {
                    if (!err){
                        callback(null,{ state: 1, data: docs });
                    } else {
                        callback(null,{ state: 0, msg: err });
                    }
                });
            } else {
                callback(null,{ state: result.state, msg: result.err });
            }
        });
    },
	count:function(config,callback){
		getconn(config, function(result) {
            if (result.state == 1) {
                result.coll.count(config.query,function(err, docs) {
                    if (!err){
                        callback(null,{ state: 1, data: docs });
                    } else {
                        callback(null,{ state: 0, msg: err });
                    }
                });
            } else {
                callback(null,{ state: result.state, msg: result.err });
            }
        });
	},
    //objectid
    toObjectID:function(str){
    	if(str){ 
    		return mongodb.BSONPure.ObjectID(str);
    	}
    },
    //获取mongodb时间
    getmongodate: function(date) {
	    if (!date) {
	        date = new Date();
	    }
	    date.setHours(date.getHours() + 8);
	    return date;
    },
    group: function (config, callback) {
        getconn(config, function (result) {
            if (result.state == 1) {
                result.coll.group(config.keys, config.condition, config.initial, config.reduce, function (err, docs) {
                    if (!err) {
                        callback(null, { state: 1, data: docs });
                    } else {
                        callback(null, { state: 0, msg: err });
                    }
                })
            } else {
                callback(null, { state: result.state, msg: result.err });
            }
        });
    }
};
exports.mongodbhandler = mongodbhandler;